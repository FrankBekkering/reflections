What happens when you initialize a repository? Why do you need to do it?

1) A hidden .git directory is created.
	1-a) contains the meta-data for the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

1) I'm not sure? if I were to change the contents of a file that was staged would the original in the working directory change too? if not then it's an obvious benefit - if it does I see no reason for the staging area to exist.
2) If it is a temp area for possible commits that are not yet fully tested you could add/remove files depending on test results.
3) I can put multiple files here and then commit them as a single group - ie 1 commit for a collection of files

How can you use the staging area to make sure you have one commit per logical change?

1) git diff without arguments will show the differences between working and staging
2) git diff --staged shows differences between staged and latest commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

1) app modifications that may or may not be implemented
	1a) allow for changes that are not yet a part of the master branch
2) individuals from a team working on different aspects of an app
	2a) allow each to add functionality without changing the master branch

How do the diagrams help you visualize the branch structure?

1) using a diagram of the branch structure would help you keep track of the various aspects of the code you and your
   collegues are working on.
2) the diagram would make it easier to visualize the parts of the program and what's been done since a branch was started

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

1) the files involved are combined together with common elements being maintained, removed elements being removed and new items being added
2)  	a. In the diagram we show that the new master/HEAD has 2 parents because the commits are now both part of the master hierarchy
	b. commits from both branches are accessible through the now combined branch (they will be displayed in git log output based on timestamp)

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

1) quickly combines files and does a fairly good job at highlighting the conflict areas so you can see which were changed & choose which lines to keep.
2) if there are a number of differences and files I guess it could be cumbersome going through the files and finding and making the adjustments
   it may be easier at that point to just swap out the old files with the new ones and go from there.

